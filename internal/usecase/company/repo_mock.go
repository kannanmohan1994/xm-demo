// Code generated by MockGen. DO NOT EDIT.
// Source: xm/internal/repo/company (interfaces: CompanyRepository)

// Package company is a generated GoMock package.
package company

import (
	reflect "reflect"
	models "xm/internal/entity/models"

	gomock "github.com/golang/mock/gomock"
)

// MockCompanyRepository is a mock of CompanyRepository interface.
type MockCompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepositoryMockRecorder
}

// MockCompanyRepositoryMockRecorder is the mock recorder for MockCompanyRepository.
type MockCompanyRepositoryMockRecorder struct {
	mock *MockCompanyRepository
}

// NewMockCompanyRepository creates a new mock instance.
func NewMockCompanyRepository(ctrl *gomock.Controller) *MockCompanyRepository {
	mock := &MockCompanyRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepository) EXPECT() *MockCompanyRepositoryMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockCompanyRepository) CreateCompany(arg0 *models.Company) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", arg0)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompanyRepositoryMockRecorder) CreateCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompanyRepository)(nil).CreateCompany), arg0)
}

// DeleteCompany mocks base method.
func (m *MockCompanyRepository) DeleteCompany(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockCompanyRepositoryMockRecorder) DeleteCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockCompanyRepository)(nil).DeleteCompany), arg0)
}

// GetCompany mocks base method.
func (m *MockCompanyRepository) GetCompany(arg0 string) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompany", arg0)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockCompanyRepositoryMockRecorder) GetCompany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockCompanyRepository)(nil).GetCompany), arg0)
}

// PatchCompany mocks base method.
func (m *MockCompanyRepository) PatchCompany(arg0 string, arg1 *models.Company) (*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCompany", arg0, arg1)
	ret0, _ := ret[0].(*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchCompany indicates an expected call of PatchCompany.
func (mr *MockCompanyRepositoryMockRecorder) PatchCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCompany", reflect.TypeOf((*MockCompanyRepository)(nil).PatchCompany), arg0, arg1)
}
